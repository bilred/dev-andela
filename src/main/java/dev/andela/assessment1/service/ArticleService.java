package dev.andela.assessment1.service;

import dev.andela.assessment1.entity.Article;
import dev.andela.assessment1.repository.ArticleRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

@Service
public class ArticleService implements IArticleService {

    private final ArticleRepository repository;

    public ArticleService(ArticleRepository repository) {
        this.repository = repository;
    }


    // will retrieve all articles stored
    //public List<Article> getAll() {
    //    return repository.findAll();
    //}
    public Page<Article> getAll(Pageable pageable) {
        return repository.findAll(pageable);
    }


    // will use the id to find an article with the same id
    // if none is found, it will return null
    public Article findById(int id) {
        return repository.findById(id).orElse(null);
    }

    // stores a new article and assigns it a unique id
    public Article add(Article article) {
        return repository.save(article);
    }

    // removes an article by its id
    public void remove(int id) {
        // If the id doesn't exist, the current method silently does nothing
        repository.findById(id).ifPresent(repository::delete);

        //if (!repository.existsById(id)) {
        //    throw new EntityNotFoundException("Article with id " + id + " not found");
        //}
    }

    // takes an updated article and stores it
    public void update(Article updated) {
        // This can cause performance issues
        // and unintended side effects (e.g., new primary keys if autogenerated)
        //repository.deleteById(updated.getId());
        //repository.save(updated);

        if (repository.existsById(updated.getId())) {
            repository.save(updated);
        }

    }
}
